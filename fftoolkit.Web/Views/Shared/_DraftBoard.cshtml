@model fftoolkit.Web.Models.DraftRoomViewModel

@if (Model.Message != null && Model.IsErrorMessage)
{
    <div id="warning-message" class="alert alert-danger">@Model.Message</div>
}

@if (Model.Message != null && !Model.IsErrorMessage)
{
    <div id="success-message" class="alert alert-success">@Model.Message</div>
}

<table class="draft-board-table">
    <thead>
        <tr>
            <th class="draft-board-table-side-column"></th>
            @for (int i = 0; i < Model.Draft.DraftParticipants.Count; i++)
            {
                <th class="draft-board-table-center-column"><div class="draft-board-team-name">@Model.Draft.DraftParticipants[i].Name</div></th>
            }
            <th class="draft-board-table-side-column"></th>
        </tr>
        <tr>
            <th></th>
            @for (int i = 0; i < Model.Draft.DraftParticipants.Count; i++)
            {
                <th>@(i + 1)</th>
            }
            <th></th>
        </tr>
    </thead>

    <tbody>

        @if (Model.DraftPicks != null)
        {
            int teamCount = Model.Draft.DraftParticipants.Count;
            for (int i = 0; i < Model.CurrentRound; i++)
            {
                int round = i + 1;
                bool isCurrentRound = round == Model.CurrentRound;

                <tr>
                    <td class="draft-board-round">@(round)</td>

                    @* odd round which drafts in ascending order *@
                    @if (round % 2 == 1)
                    {
                        for (int j = 0; j < teamCount; j++)
                        {
                            int draftPickIndex = (i * teamCount) + j;

                            <td class="draft-board-player-cell">
                                @if (draftPickIndex < Model.DraftPicks.Count)
                                {
                                    <div class="draft-board-player">
                                        @if (Model.DraftPicks[draftPickIndex].Player != null)
                                        {
                                            <div class="draft-board-player-name">@Model.DraftPicks[draftPickIndex].Player.Name</div>
                                            <div>(@Model.DraftPicks[draftPickIndex].Player.Position, @Model.DraftPicks[draftPickIndex].Player.Team)</div>
                                        }
                                        else
                                        {
                                            <div class="draft-board-player-name">@Model.DraftPicks[draftPickIndex].WriteInName</div>
                                        }
                                    </div>
                                }
                            </td>
                        }
                    }
                    @* even round which drafts in descending order *@
                    else
                    {
                        for (int j = teamCount - 1; j >= 0; j--)
                        {
                            int draftPickIndex = (i * teamCount) + j;

                            <td class="draft-board-player-cell">
                                @if (draftPickIndex < Model.DraftPicks.Count)
                                {
                                    <div class="draft-board-player">
                                        <div class="draft-board-player-name">@Model.DraftPicks[draftPickIndex].Player.Name</div>
                                        <div>(@Model.DraftPicks[draftPickIndex].Player.Position, @Model.DraftPicks[draftPickIndex].Player.Team)</div>
                                    </div>
                                }
                            </td>
                        }
                    }

                    <td class="draft-board-round">@(round)</td>
                </tr>
            }
        }
    </tbody>

    <tfoot>
        <tr>
            <th></th>
            @for (int i = 0; i < Model.Draft.DraftParticipants.Count; i++)
            {
                <th>@(i + 1)</th>
            }
            <th></th>
        </tr>
        <tr>
            <th></th>
            @for (int i = 0; i < Model.Draft.DraftParticipants.Count; i++)
            {
                <th><div class="draft-board-team-name">@Model.Draft.DraftParticipants[i].Name</div></th>
            }
            <th></th>
        </tr>
    </tfoot>
</table>

@Html.HiddenFor(m => m.Draft.DraftId)
@Html.HiddenFor(m => m.Draft.OwnerUserId)
@Html.HiddenFor(m => m.Draft.LeagueId)
@Html.HiddenFor(m => m.Draft.Name)
@Html.HiddenFor(m => m.Draft.StartDate)
@Html.HiddenFor(m => m.Draft.Teams)
@Html.HiddenFor(m => m.Draft.Rounds)

@if (Model.Draft.DraftParticipants != null)
{
    for (int i = 0; i < Model.Draft.DraftParticipants.Count; i++)
    {
        @Html.HiddenFor(m => m.Draft.DraftParticipants[i].DraftParticipantId)
        @Html.HiddenFor(m => m.Draft.DraftParticipants[i].DraftId)
        @Html.HiddenFor(m => m.Draft.DraftParticipants[i].UserId)
        @Html.HiddenFor(m => m.Draft.DraftParticipants[i].DraftPosition)
        @Html.HiddenFor(m => m.Draft.DraftParticipants[i].Name)
    }
}

@if (Model.Players != null)
{
    for (int i = 0; i < Model.Players.Count; i++)
    {
        @Html.HiddenFor(m => m.Players[i].PlayerId)
        @Html.HiddenFor(m => m.Players[i].Name)
        @Html.HiddenFor(m => m.Players[i].Position)
        @Html.HiddenFor(m => m.Players[i].Team)
    }
}

@Html.HiddenFor(m => m.SelectedPlayerId)
@Html.HiddenFor(m => m.SelectedPlayerName)
@Html.HiddenFor(m => m.CurrentRound)
@Html.HiddenFor(m => m.CurrentPick)
@Html.HiddenFor(m => m.DraftPickAscending)

@if (Model.DraftPicks != null)
{
    for (int i = 0; i < Model.DraftPicks.Count; i++)
    {
        @Html.HiddenFor(m => m.DraftPicks[i].DraftPickId)
        @Html.HiddenFor(m => m.DraftPicks[i].DraftId)
        @Html.HiddenFor(m => m.DraftPicks[i].PlayerId)
        @Html.HiddenFor(m => m.DraftPicks[i].Round)
        @Html.HiddenFor(m => m.DraftPicks[i].Pick)
        @Html.HiddenFor(m => m.DraftPicks[i].WriteInName)

        if (Model.DraftPicks[i].Player != null)
        {
            @Html.HiddenFor(m => m.DraftPicks[i].Player.PlayerId)
            @Html.HiddenFor(m => m.DraftPicks[i].Player.Name)
            @Html.HiddenFor(m => m.DraftPicks[i].Player.Position)
            @Html.HiddenFor(m => m.DraftPicks[i].Player.Team)
        }
    }
}